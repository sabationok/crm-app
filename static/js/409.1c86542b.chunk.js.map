{"version":3,"file":"static/js/409.1c86542b.chunk.js","mappings":"8NAwDA,UA1CmB,SAAC,GAAyB,IAAD,IAAtBA,KAAAA,OAAsB,MAAf,SAAe,EACpCC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAQC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAaJ,IACjCK,EAAoBC,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,cAAhB,IAC1CC,EAAqBJ,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,eAAhB,IAC3CE,EAA0BL,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,oBAAhB,IAEhDG,EAAY,CAChBC,QAAQ,SAAC,MAAD,UAAqBH,IAC7BR,OAAO,SAAC,MAAD,UAAoBG,IAC3BS,cAAc,SAAC,MAAD,UAA4BH,IAC1CI,YAAY,SAAC,MAAD,UAAmBJ,KAWjC,OARAK,EAAAA,EAAAA,YAAU,WAGR,OAFAlB,GAASmB,EAAAA,EAAAA,KAAwB,IAE1B,WACLnB,GAASmB,EAAAA,EAAAA,KAAwB,GAClC,CACF,GAAE,CAACnB,KAGF,gCACG,KACD,UAAC,KAAD,CAAcoB,UAAWrB,EAAMK,MAAOA,EAAtC,WACE,UAAC,KAAD,YACE,SAAC,MAAD,UAAqBQ,KACrB,SAAC,MAAD,UAAoBL,KACpB,SAAC,MAAD,UAAmBM,QAErB,SAAC,KAAD,UAAcd,EAAOe,EAAUf,GAAQe,EAAUC,SAAsB,SAI9E,C","sources":["components/AppPages/PageOrders.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PageProvider from './PageProvider';\nimport { MinTabletXl, MaxToTablet } from 'components/DeviceTypeInformer/DeviceTypeController';\nimport { BlockOrdersList, BlockOrderInfo, BlockOrderRealizations, BlockOrderTTN } from 'components/Blocks/BlocksMap';\nimport { blocksNames, blocksSettings } from 'data';\nimport { useDispatch } from 'react-redux';\nimport { actionSetPageGridChange } from 'redux/page/pageActions';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getOrderById } from 'redux/selectors';\n\n// import s from './PageOrders.module.scss';\n\nconst PageOrders = ({ path = 'orders' }) => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const order = useSelector(getOrderById(id));\n  const BlockOrderInfoSet = blocksSettings.find(el => el.name === blocksNames.BlockOrderInfo);\n  const BlockOrdersListSet = blocksSettings.find(el => el.name === blocksNames.BlockOrdersList);\n  const BlockOrderDeliveriesSet = blocksSettings.find(el => el.name === blocksNames.BlockOrderDeliveries);\n\n  const blocksMap = {\n    orders: <BlockOrdersList {...BlockOrdersListSet} />,\n    order: <BlockOrderInfo {...BlockOrderInfoSet} />,\n    realizations: <BlockOrderRealizations {...BlockOrderDeliveriesSet} />,\n    deliveries: <BlockOrderTTN {...BlockOrderDeliveriesSet} />,\n  };\n\n  useEffect(() => {\n    dispatch(actionSetPageGridChange(true));\n\n    return () => {\n      dispatch(actionSetPageGridChange(false));\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      {' '}\n      <PageProvider indexPath={path} order={order}>\n        <MinTabletXl>\n          <BlockOrdersList {...BlockOrdersListSet} />\n          <BlockOrderInfo {...BlockOrderInfoSet} />\n          <BlockOrderTTN {...BlockOrderDeliveriesSet} />\n        </MinTabletXl>\n        <MaxToTablet>{path ? blocksMap[path] : blocksMap.orders}</MaxToTablet>{' '}\n      </PageProvider>\n    </>\n  );\n};\n\nPageOrders.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n};\n\nexport default PageOrders;\n"],"names":["path","dispatch","useDispatch","id","useParams","order","useSelector","getOrderById","BlockOrderInfoSet","blocksSettings","el","name","blocksNames","BlockOrdersListSet","BlockOrderDeliveriesSet","blocksMap","orders","realizations","deliveries","useEffect","actionSetPageGridChange","indexPath"],"sourceRoot":""}