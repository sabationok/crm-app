{"version":3,"file":"static/js/963.3a2291c8.chunk.js","mappings":"uQAgEA,UApDqB,SAAC,GAAqC,IAAD,IAAlCA,KAAAA,OAAkC,MAA3B,WAA2B,EACxD,IADwD,aACzBC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,gBAAlDC,GAAP,eACA,GAA8BH,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,cAAjDE,GAAP,eACA,GAA+BJ,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,eAAlDG,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAOC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAYJ,IAE/BK,EAAY,CAChBC,UAAU,SAAC,MAAD,UAAuBX,IACjCY,SAAS,SAAC,MAAD,UAAsBX,IAC/BY,OAAO,SAAC,MAAD,UAAuBX,MAGhCY,EAAAA,EAAAA,YAAU,WAER,GADAX,GAASY,EAAAA,EAAAA,KAAwB,IAC5BV,EAAL,CAEO,GAAKE,EAMZ,OAFAJ,GAASa,EAAAA,EAAAA,IAAqBT,IAEvB,WACLJ,GAASY,EAAAA,EAAAA,KAAwB,IACjCZ,GAASa,EAAAA,EAAAA,IAAqB,MAC/B,EARCC,EAAAA,GAAAA,MAAY,kLAEb,CAOF,GAAE,CAACd,EAAUI,EAAMF,IAEpB,IAAMa,EAAM,CACVC,UAAWvB,GAGb,OACE,+BACE,UAAC,MAAD,kBAAkBsB,GAAlB,eACE,UAAC,KAAD,WACGR,EAAUC,SACVD,EAAUE,QACVF,EAAUG,UAEb,SAAC,KAAD,UAAcjB,EAAOc,EAAUd,GAAQc,EAAUC,gBAIxD,C,wDCxDYS,GAAUC,EAAAA,EAAAA,iBAUvB,KARqB,SAAAC,GACnB,OACE,+BACE,SAACF,EAAQG,SAAT,CAAkBC,OAAK,UAAOF,GAA9B,SAAwCA,EAAMG,YAGnD,C","sources":["components/AppPages/PageProducts.jsx","components/AppPages/PageProvider.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PageProvider from './PageProvider';\nimport { MinTabletXl, MaxToTablet } from 'components/DeviceTypeInformer/DeviceTypeController';\nimport { BlockProductsList, BlockProductInfo, BlockProductStock } from 'components/Blocks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actionSetPageGridChange, actionSetPageObjData } from 'redux/page/pageActions';\nimport { getBlockSettings, blocksNames } from 'data';\nimport { useParams } from 'react-router-dom';\nimport { getPostById } from 'redux/selectors';\nimport { toast } from 'react-toastify';\n\nconst PageProducts = ({ path = 'products', ...props }) => {\n  const [BlockProductsListSet] = useState(getBlockSettings(blocksNames.ProductsList));\n  const [BlockProductInfoSet] = useState(getBlockSettings(blocksNames.ProductInfo));\n  const [BlockProductStockSet] = useState(getBlockSettings(blocksNames.ProductStock));\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const post = useSelector(getPostById(id));\n\n  const BlocksMap = {\n    products: <BlockProductsList {...BlockProductsListSet} />,\n    product: <BlockProductInfo {...BlockProductInfoSet} />,\n    stock: <BlockProductStock {...BlockProductStockSet} />,\n  };\n\n  useEffect(() => {\n    dispatch(actionSetPageGridChange(true));\n    if (!id) {\n      return;\n    } else if (!post) {\n      toast.error('За таким ID результатів не знайдено');\n      return;\n    }\n    dispatch(actionSetPageObjData(post));\n\n    return () => {\n      dispatch(actionSetPageGridChange(false));\n      dispatch(actionSetPageObjData(null));\n    };\n  }, [dispatch, post, id]);\n\n  const ctx = {\n    indexPath: path,\n  };\n\n  return (\n    <>\n      <PageProvider {...ctx}>\n        <MinTabletXl>\n          {BlocksMap.products}\n          {BlocksMap.product}\n          {BlocksMap.stock}\n        </MinTabletXl>\n        <MaxToTablet>{path ? BlocksMap[path] : BlocksMap.products}</MaxToTablet>\n      </PageProvider>\n    </>\n  );\n};\n\nPageProducts.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n};\n\nexport default PageProducts;\n","import React, { createContext, useContext } from 'react';\n\nexport const PageCTX = createContext();\nexport const usePage = () => useContext(PageCTX);\nconst PageProvider = props => {\n  return (\n    <>\n      <PageCTX.Provider value={{ ...props }}>{props.children}</PageCTX.Provider>\n    </>\n  );\n};\n\nexport default PageProvider;\n"],"names":["path","useState","getBlockSettings","blocksNames","BlockProductsListSet","BlockProductInfoSet","BlockProductStockSet","dispatch","useDispatch","id","useParams","post","useSelector","getPostById","BlocksMap","products","product","stock","useEffect","actionSetPageGridChange","actionSetPageObjData","toast","ctx","indexPath","PageCTX","createContext","props","Provider","value","children"],"sourceRoot":""}