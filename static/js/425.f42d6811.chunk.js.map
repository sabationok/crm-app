{"version":3,"file":"static/js/425.f42d6811.chunk.js","mappings":"iPAkEA,UApDmB,SAAC,GAAyB,IAAD,IAAtBA,KAAAA,OAAsB,MAAf,SAAe,EAC1C,GAA6BC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,aAAhDC,GAAP,eACA,GAA4BH,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,YAA/CE,GAAP,eACA,GAAkCJ,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAiBC,EAAAA,GAAAA,kBAArDG,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAQC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAaJ,IAEjCK,EAAY,CAChBC,QAAQ,SAAC,MAAD,UAAqBX,IAC7BO,OAAO,SAAC,MAAD,UAAoBN,IAC3BW,YAAY,SAAC,MAAD,UAAmBV,MAGjCW,EAAAA,EAAAA,YAAU,WAER,GADAV,GAASW,EAAAA,EAAAA,KAAwB,IAC5BT,EAAL,CAEO,GAAKE,EAMZ,OAFAJ,GAASY,EAAAA,EAAAA,IAAqBR,IAEvB,WACLJ,GAASW,EAAAA,EAAAA,KAAwB,IACjCX,GAASY,EAAAA,EAAAA,IAAqB,MAC/B,EARCC,EAAAA,GAAAA,MAAY,kLAEb,CAOF,GAAE,CAACb,EAAUI,EAAOF,IAErB,IAAMY,EAAM,CACVC,UAAWtB,GAGb,OACE,+BACE,UAAC,MAAD,kBAAkBqB,GAAlB,eACE,UAAC,KAAD,WACGP,EAAUC,OACVD,EAAUH,MACVG,EAAUE,eAEb,SAAC,KAAD,UAAchB,EAAOc,EAAUd,GAAQc,EAAUC,cAIxD,C,wDC1DYQ,GAAUC,EAAAA,EAAAA,iBAUvB,KARqB,SAAAC,GACnB,OACE,+BACE,SAACF,EAAQG,SAAT,CAAkBC,OAAK,UAAOF,GAA9B,SAAwCA,EAAMG,YAGnD,C","sources":["components/AppPages/PageOrders.jsx","components/AppPages/PageProvider.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PageProvider from './PageProvider';\nimport { MinTabletXl, MaxToTablet } from 'components/DeviceTypeInformer/DeviceTypeController';\nimport { BlockOrdersList, BlockOrderInfo, BlockOrderTTN } from 'components/Blocks';\nimport { blocksNames, getBlockSettings } from 'data';\nimport { useDispatch } from 'react-redux';\nimport { actionSetPageGridChange } from 'redux/page/pageActions';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getOrderById } from 'redux/selectors';\nimport { actionSetPageObjData } from 'redux/page/pageActions';\nimport { toast } from 'react-toastify';\n\nconst PageOrders = ({ path = 'orders' }) => {\n  const [BlockOrdersListSet] = useState(getBlockSettings(blocksNames.OrdersList));\n  const [BlockOrderInfoSet] = useState(getBlockSettings(blocksNames.OrderInfo));\n  const [BlockOrderDeliveriesSet] = useState(getBlockSettings(blocksNames.OrderDeliveries));\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const order = useSelector(getOrderById(id));\n\n  const BlocksMap = {\n    orders: <BlockOrdersList {...BlockOrdersListSet} />,\n    order: <BlockOrderInfo {...BlockOrderInfoSet} />,\n    deliveries: <BlockOrderTTN {...BlockOrderDeliveriesSet} />,\n  };\n\n  useEffect(() => {\n    dispatch(actionSetPageGridChange(true));\n    if (!id) {\n      return;\n    } else if (!order) {\n      toast.error('За таким ID результатів не знайдено');\n      return;\n    }\n    dispatch(actionSetPageObjData(order));\n\n    return () => {\n      dispatch(actionSetPageGridChange(false));\n      dispatch(actionSetPageObjData(null));\n    };\n  }, [dispatch, order, id]);\n\n  const ctx = {\n    indexPath: path,\n  };\n\n  return (\n    <>\n      <PageProvider {...ctx}>\n        <MinTabletXl>\n          {BlocksMap.orders}\n          {BlocksMap.order}\n          {BlocksMap.deliveries}\n        </MinTabletXl>\n        <MaxToTablet>{path ? BlocksMap[path] : BlocksMap.orders}</MaxToTablet>\n      </PageProvider>\n    </>\n  );\n};\n\nPageOrders.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n};\n\nexport default PageOrders;\n","import React, { createContext, useContext } from 'react';\n\nexport const PageCTX = createContext();\nexport const usePage = () => useContext(PageCTX);\nconst PageProvider = props => {\n  return (\n    <>\n      <PageCTX.Provider value={{ ...props }}>{props.children}</PageCTX.Provider>\n    </>\n  );\n};\n\nexport default PageProvider;\n"],"names":["path","useState","getBlockSettings","blocksNames","BlockOrdersListSet","BlockOrderInfoSet","BlockOrderDeliveriesSet","dispatch","useDispatch","id","useParams","order","useSelector","getOrderById","BlocksMap","orders","deliveries","useEffect","actionSetPageGridChange","actionSetPageObjData","toast","ctx","indexPath","PageCTX","createContext","props","Provider","value","children"],"sourceRoot":""}