{"version":3,"file":"static/js/360.c522c549.chunk.js","mappings":"yOAiEA,UApDoB,SAAC,GAA0B,IAAD,IAAvBA,KAAAA,OAAuB,MAAhB,UAAgB,EACtCC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAASC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAcJ,IAEnCK,EAAqBC,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,eAAhB,IAC3CC,EAAsBJ,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,gBAAhB,IAC5CE,EAA2BL,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,kBAAhB,IAEjDG,EAAY,CAChBC,SAAS,SAAC,MAAD,UAAsBH,IAC/BR,QAAQ,SAAC,MAAD,UAAqBG,IAC7BS,YAAY,SAAC,MAAD,UAAwBH,MAGtCI,EAAAA,EAAAA,YAAU,WAER,GADAjB,GAASkB,EAAAA,EAAAA,KAAwB,IAC5BhB,EAAL,CAEO,GAAKE,EAMZ,OAFAJ,GAASmB,EAAAA,EAAAA,IAAqBf,IAEvB,WACLJ,GAASkB,EAAAA,EAAAA,KAAwB,IACjClB,GAASmB,EAAAA,EAAAA,IAAqB,MAC/B,EARCC,EAAAA,GAAAA,MAAY,kLAEb,CAOF,GAAE,CAACpB,EAAUE,EAAIE,IAElB,IAAMiB,EAAM,CACVC,UAAWvB,GAGb,OACE,+BACE,UAAC,MAAD,kBAAkBsB,GAAlB,eACE,UAAC,KAAD,YACE,SAAC,MAAD,UAAsBT,KACtB,SAAC,MAAD,UAAqBL,KACrB,SAAC,MAAD,UAAwBM,QAE1B,SAAC,KAAD,UAAcd,EAAOe,EAAUf,GAAQe,EAAUC,eAIxD,C","sources":["components/AppPages/PageRefunds.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PageProvider from './PageProvider';\nimport { BlockRefundsList, BlockRefundInspect, BlockRefundInfo } from 'components/Blocks';\nimport { MinTabletXl, MaxToTablet } from 'components/DeviceTypeInformer/DeviceTypeController';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actionSetPageGridChange, actionSetPageObjData } from 'redux/page/pageActions';\nimport { blocksSettings, blocksNames } from 'data';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getRefundById } from 'redux/selectors';\n// import s from './PageRefunds.module.scss';\n\nconst PageRefunds = ({ path = 'refunds' }) => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const refund = useSelector(getRefundById(id));\n\n  const BlockRefundInfoSet = blocksSettings.find(el => el.name === blocksNames.BlockRefundInfo);\n  const BlockRefundsListSet = blocksSettings.find(el => el.name === blocksNames.BlockRefundsList);\n  const BlockRefundInspectionSet = blocksSettings.find(el => el.name === blocksNames.BlockRefundInspect);\n\n  const blocksMap = {\n    refunds: <BlockRefundsList {...BlockRefundsListSet} />,\n    refund: <BlockRefundInfo {...BlockRefundInfoSet} />,\n    inspection: <BlockRefundInspect {...BlockRefundInspectionSet} />,\n  };\n\n  useEffect(() => {\n    dispatch(actionSetPageGridChange(true));\n    if (!id) {\n      return;\n    } else if (!refund) {\n      toast.error('За таким ID результатів не знайдено');\n      return;\n    }\n    dispatch(actionSetPageObjData(refund));\n\n    return () => {\n      dispatch(actionSetPageGridChange(false));\n      dispatch(actionSetPageObjData(null));\n    };\n  }, [dispatch, id, refund]);\n\n  const ctx = {\n    indexPath: path,\n  };\n\n  return (\n    <>\n      <PageProvider {...ctx}>\n        <MinTabletXl>\n          <BlockRefundsList {...BlockRefundsListSet} />\n          <BlockRefundInfo {...BlockRefundInfoSet} />\n          <BlockRefundInspect {...BlockRefundInspectionSet} />\n        </MinTabletXl>\n        <MaxToTablet>{path ? blocksMap[path] : blocksMap.refunds}</MaxToTablet>\n      </PageProvider>\n    </>\n  );\n};\nPageRefunds.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n};\n\nexport default PageRefunds;\n"],"names":["path","dispatch","useDispatch","id","useParams","refund","useSelector","getRefundById","BlockRefundInfoSet","blocksSettings","el","name","blocksNames","BlockRefundsListSet","BlockRefundInspectionSet","blocksMap","refunds","inspection","useEffect","actionSetPageGridChange","actionSetPageObjData","toast","ctx","indexPath"],"sourceRoot":""}