{"version":3,"file":"static/js/425.dcd72660.chunk.js","mappings":"wOAmEA,UArDmB,SAAC,GAAyB,IAAD,IAAtBA,KAAAA,OAAsB,MAAf,SAAe,EACpCC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAQC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAaJ,IAEjCK,EAAoBC,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,cAAhB,IAC1CC,EAAqBJ,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,eAAhB,IAC3CE,EAA0BL,EAAAA,GAAAA,MAAoB,SAAAC,GAAE,OAAIA,EAAGC,OAASC,EAAAA,GAAAA,oBAAhB,IAEhDG,EAAY,CAChBC,QAAQ,SAAC,MAAD,UAAqBH,IAC7BR,OAAO,SAAC,MAAD,UAAoBG,IAC3BS,YAAY,SAAC,MAAD,UAAmBH,MAGjCI,EAAAA,EAAAA,YAAU,WAER,GADAjB,GAASkB,EAAAA,EAAAA,KAAwB,IAC5BhB,EAAL,CAEO,GAAKE,EAMZ,OAFAJ,GAASmB,EAAAA,EAAAA,IAAqBf,IAEvB,WACLJ,GAASkB,EAAAA,EAAAA,KAAwB,IACjClB,GAASmB,EAAAA,EAAAA,IAAqB,MAC/B,EARCC,EAAAA,GAAAA,MAAY,kLAEb,CAOF,GAAE,CAACpB,EAAUI,EAAOF,IAErB,IAAMmB,EAAM,CACVC,UAAWvB,GAGb,OACE,+BACE,UAAC,MAAD,kBAAkBsB,GAAlB,eACE,UAAC,KAAD,YACE,SAAC,MAAD,UAAqBT,KACrB,SAAC,MAAD,UAAoBL,KACpB,SAAC,MAAD,UAAmBM,QAErB,SAAC,KAAD,UAAcd,EAAOe,EAAUf,GAAQe,EAAUC,cAIxD,C","sources":["components/AppPages/PageOrders.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport PageProvider from './PageProvider';\nimport { MinTabletXl, MaxToTablet } from 'components/DeviceTypeInformer/DeviceTypeController';\nimport { BlockOrdersList, BlockOrderInfo, BlockOrderTTN } from 'components/Blocks';\nimport { blocksNames, blocksSettings } from 'data';\nimport { useDispatch } from 'react-redux';\nimport { actionSetPageGridChange } from 'redux/page/pageActions';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getOrderById } from 'redux/selectors';\nimport { actionSetPageObjData } from 'redux/page/pageActions';\nimport { toast } from 'react-toastify';\n\nconst PageOrders = ({ path = 'orders' }) => {\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const order = useSelector(getOrderById(id));\n\n  const BlockOrderInfoSet = blocksSettings.find(el => el.name === blocksNames.BlockOrderInfo);\n  const BlockOrdersListSet = blocksSettings.find(el => el.name === blocksNames.BlockOrdersList);\n  const BlockOrderDeliveriesSet = blocksSettings.find(el => el.name === blocksNames.BlockOrderDeliveries);\n\n  const BlocksMap = {\n    orders: <BlockOrdersList {...BlockOrdersListSet} />,\n    order: <BlockOrderInfo {...BlockOrderInfoSet} />,\n    deliveries: <BlockOrderTTN {...BlockOrderDeliveriesSet} />,\n  };\n\n  useEffect(() => {\n    dispatch(actionSetPageGridChange(true));\n    if (!id) {\n      return;\n    } else if (!order) {\n      toast.error('За таким ID результатів не знайдено');\n      return;\n    }\n    dispatch(actionSetPageObjData(order));\n\n    return () => {\n      dispatch(actionSetPageGridChange(false));\n      dispatch(actionSetPageObjData(null));\n    };\n  }, [dispatch, order, id]);\n\n  const ctx = {\n    indexPath: path,\n  };\n\n  return (\n    <>\n      <PageProvider {...ctx}>\n        <MinTabletXl>\n          <BlockOrdersList {...BlockOrdersListSet} />\n          <BlockOrderInfo {...BlockOrderInfoSet} />\n          <BlockOrderTTN {...BlockOrderDeliveriesSet} />\n        </MinTabletXl>\n        <MaxToTablet>{path ? BlocksMap[path] : BlocksMap.orders}</MaxToTablet>\n      </PageProvider>\n    </>\n  );\n};\n\nPageOrders.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n};\n\nexport default PageOrders;\n"],"names":["path","dispatch","useDispatch","id","useParams","order","useSelector","getOrderById","BlockOrderInfoSet","blocksSettings","el","name","blocksNames","BlockOrdersListSet","BlockOrderDeliveriesSet","BlocksMap","orders","deliveries","useEffect","actionSetPageGridChange","actionSetPageObjData","toast","ctx","indexPath"],"sourceRoot":""}